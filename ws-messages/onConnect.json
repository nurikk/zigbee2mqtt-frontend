[
    {
        "payload": "online",
        "topic": "bridge/state"
    },
    {
        "payload": {
            "commit": "23ef22e9",
            "config": {
                "advanced": {
                    "adapter_concurrent": null,
                    "adapter_delay": null,
                    "availability_blacklist": [],
                    "availability_blocklist": [],
                    "availability_passlist": [],
                    "availability_whitelist": [],
                    "cache_state": true,
                    "cache_state_persistent": true,
                    "cache_state_send_on_startup": true,
                    "channel": 15,
                    "elapsed": true,
                    "ext_pan_id": [
                        170,
                        187,
                        204,
                        221,
                        238,
                        255,
                        0,
                        0
                    ],
                    "homeassistant_legacy_entity_attributes": false,
                    "ikea_ota_use_test_url": false,
                    "last_seen": "ISO_8601_local",
                    "legacy_api": false,
                    "legacy_availability_payload": true,
                    "log_directory": "/home/nur/.z2m/log/%TIMESTAMP%",
                    "log_file": "log.txt",
                    "log_level": "debug",
                    "log_output": [
                        "console"
                    ],
                    "log_rotation": true,
                    "log_symlink_current": false,
                    "log_syslog": {
                        "app_name": "Zigbee2MQTT",
                        "eol": "/n",
                        "host": "localhost",
                        "localhost": "localhost",
                        "path": "/dev/log",
                        "pid": "process.pid",
                        "port": 123,
                        "protocol": "tcp4",
                        "type": "5424"
                    },
                    "output": "json",
                    "pan_id": 2345,
                    "report": false,
                    "soft_reset_timeout": 0,
                    "timestamp_format": "YYYY-MM-DD HH:mm:ss",
                    "transmit_power": 20
                },
                "availability": {},
                "blocklist": [],
                "device_options": {
                    "legacy": false
                },
                "devices": {
                    "0x00124b001e73227f": {
                        "description": "wqewqe",
                        "friendly_name": "0x00124b001e73227f1"
                    },
                    "0x00124b001fb59621": {
                        "friendly_name": "livingroom/co2233"
                    },
                    "0x00158d0001e1a85a": {
                        "friendly_name": "livingroom/window"
                    },
                    "0x00158d0001fa4f2f": {
                        "friendly_name": "livingroom/temp_humidity"
                    },
                    "0x00158d000224154d": {
                        "friendly_name": "0x00158d000224154d"
                    },
                    "0x00158d0002c48958": {
                        "availability": false,
                        "description": "датчик прикрепленный к рабочему стулу",
                        "friendly_name": "work/nur/jopa"
                    },
                    "0x00158d00039fe32c": {
                        "description": "это любой текст",
                        "friendly_name": "dining room/ac power"
                    },
                    "0x00158d0004261dc7": {
                        "friendly_name": "livingroom/ac power"
                    },
                    "0x00158d0004866f11": {
                        "friendly_name": "0x00158d0004866f11",
                        "temperature_calibration": 6,
                        "temperature_precision": 1
                    },
                    "0x0017880103d55d65": {
                        "friendly_name": "0x0017880103d55d65"
                    },
                    "0x0017880104292f0a": {
                        "description": "descr",
                        "friendly_name": "hue1",
                        "homeassistant": {
                            "name": "HA name"
                        },
                        "legacy": false,
                        "optimistic": true
                    },
                    "0x0017880104dfc05e": {
                        "friendly_name": "hue_back_tv"
                    },
                    "0x804b50fffe5d11ea": {
                        "friendly_name": "0x804b50fffe5d11ea"
                    },
                    "0x847127fffeacff97": {
                        "friendly_name": "0x847127fffeacff97"
                    },
                    "0xbc33acfffe17628b": {
                        "friendly_name": "0xbc33acfffe17628b"
                    }
                },
                "experimental": {
                    "new_api": true,
                    "transmit_power": 20
                },
                "external_converters": [
                    "test-conv.js"
                ],
                "frontend": {
                    "host": "0.0.0.0",
                    "port": 8080
                },
                "groups": {
                    "1": {
                        "description": "Test group description",
                        "devices": [
                            "0x0017880103d55d65/11",
                            "0x0017880104292f0a/11",
                            "0x0017880104dfc05e/11"
                        ],
                        "friendly_name": "hue lights"
                    }
                },
                "homeassistant": {
                    "discovery_topic": "homeassistant",
                    "legacy_entity_attributes": false,
                    "legacy_triggers": true,
                    "status_topic": "hass/status"
                },
                "map_options": {
                    "graphviz": {
                        "colors": {
                            "fill": {
                                "coordinator": "#e04e5d",
                                "enddevice": "#fff8ce",
                                "router": "#4ea3e0"
                            },
                            "font": {
                                "coordinator": "#ffffff",
                                "enddevice": "#000000",
                                "router": "#ffffff"
                            },
                            "line": {
                                "active": "#009900",
                                "inactive": "#994444"
                            }
                        }
                    }
                },
                "mqtt": {
                    "base_topic": "zigbee2mqtt",
                    "force_disable_retain": false,
                    "include_device_information": false,
                    "server": "mqtt://192.168.1.200",
                    "user": "zeigbeegw"
                },
                "ota": {
                    "disable_automatic_update_check": false,
                    "ikea_ota_use_test_url": false,
                    "update_check_interval": 1440
                },
                "passlist": [],
                "permit_join": false,
                "queue": {},
                "serial": {
                    "disable_led": false,
                    "port": "/dev/ttyS1"
                }
            },
            "config_schema": {
                "definitions": {
                    "device": {
                        "properties": {
                            "debounce": {
                                "description": "Debounces messages of this device",
                                "title": "Debounce",
                                "type": "number"
                            },
                            "debounce_ignore": {
                                "description": "Protects unique payload values of specified payload properties from overriding within debounce time",
                                "examples": [
                                    "action"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "title": "Ignore debounce",
                                "type": "array"
                            },
                            "filtered_attributes": {
                                "description": "Filter attributes from publish payload.",
                                "examples": [
                                    "temperature",
                                    "battery",
                                    "action"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "title": "Filtered publish attributes",
                                "type": "array"
                            },
                            "filtered_optimistic": {
                                "description": "Filter attributes from optimistic publish payload when calling /set. (This has no effect if optimistic is set to false).",
                                "examples": [
                                    "color_mode",
                                    "color_temp",
                                    "color"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "title": "Filtered optimistic attributes",
                                "type": "array"
                            },
                            "friendly_name": {
                                "description": "Used in the MQTT topic of a device. By default this is the device ID",
                                "readOnly": true,
                                "title": "Friendly name",
                                "type": "string"
                            },
                            "homeassistant": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the device in Home Assistant",
                                        "title": "Name",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "icon": {
                                "description": "The user-defined device icon for the frontend. It can be a link to an image (not a path to a file) or base64 encoded data URL like: image/svg+xml;base64,PHN2ZyB3aW....R0aD",
                                "title": "Icon",
                                "type": "string"
                            },
                            "optimistic": {
                                "default": true,
                                "description": "Publish optimistic state after set",
                                "title": "Optimistic",
                                "type": "boolean"
                            },
                            "qos": {
                                "description": "QoS level for MQTT messages of this device",
                                "title": "QoS",
                                "type": "number"
                            },
                            "retain": {
                                "description": "Retain MQTT messages of this device",
                                "title": "Retain",
                                "type": "boolean"
                            },
                            "retention": {
                                "description": "Sets the MQTT Message Expiry in seconds, Make sure to set mqtt.version to 5",
                                "title": "Retention",
                                "type": "number"
                            }
                        },
                        "required": [
                            "friendly_name"
                        ],
                        "type": "object"
                    },
                    "group": {
                        "properties": {
                            "devices": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "filtered_attributes": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "friendly_name": {
                                "type": "string"
                            },
                            "optimistic": {
                                "type": "boolean"
                            },
                            "qos": {
                                "type": "number"
                            },
                            "retain": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "friendly_name"
                        ],
                        "type": "object"
                    }
                },
                "properties": {
                    "advanced": {
                        "properties": {
                            "adapter_concurrent": {
                                "description": "Adapter concurrency (e.g. 2 for CC2531 or 16 for CC26X2R1) (default: null, uses recommended value)",
                                "requiresRestart": true,
                                "title": "Adapter concurrency",
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "adapter_delay": {
                                "description": "Adapter delay",
                                "requiresRestart": true,
                                "title": "Adapter delay",
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "cache_state": {
                                "default": true,
                                "description": "MQTT message payload will contain all attributes, not only changed ones. Has to be true when integrating via Home Assistant",
                                "title": "Cache state",
                                "type": "boolean"
                            },
                            "cache_state_persistent": {
                                "default": true,
                                "description": "Persist cached state, only used when cache_state: true",
                                "title": "Persist cache state",
                                "type": "boolean"
                            },
                            "cache_state_send_on_startup": {
                                "default": true,
                                "description": "Send cached state on startup, only used when cache_state: true",
                                "title": "Send cached state on startup",
                                "type": "boolean"
                            },
                            "channel": {
                                "default": 11,
                                "description": "Zigbee channel, changing requires repairing all devices! (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid Problems)",
                                "examples": [
                                    15,
                                    20,
                                    25
                                ],
                                "maximum": 26,
                                "minimum": 11,
                                "requiresRestart": true,
                                "title": "ZigBee channel",
                                "type": "number"
                            },
                            "elapsed": {
                                "default": false,
                                "description": "Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg",
                                "title": "Elapsed",
                                "type": "boolean"
                            },
                            "ext_pan_id": {
                                "description": "Zigbee extended pan ID, changing requires repairing all devices!",
                                "items": {
                                    "type": "number"
                                },
                                "requiresRestart": true,
                                "title": "Ext Pan ID",
                                "type": "array"
                            },
                            "last_seen": {
                                "default": "disable",
                                "description": "Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message",
                                "enum": [
                                    "disable",
                                    "ISO_8601",
                                    "ISO_8601_local",
                                    "epoch"
                                ],
                                "title": "Last seen",
                                "type": "string"
                            },
                            "legacy_api": {
                                "default": true,
                                "description": "Disables the legacy api (false = disable)",
                                "requiresRestart": true,
                                "title": "Legacy API",
                                "type": "boolean"
                            },
                            "legacy_availability_payload": {
                                "default": true,
                                "description": "Payload to be used for device availabilty and bridge/state topics. true = text, false = JSON",
                                "requiresRestart": true,
                                "title": "Legacy availability payload",
                                "type": "boolean"
                            },
                            "log_directory": {
                                "description": "Location of log directory",
                                "examples": [
                                    "data/log/%TIMESTAMP%"
                                ],
                                "requiresRestart": true,
                                "title": "Log directory",
                                "type": "string"
                            },
                            "log_file": {
                                "default": "log.txt",
                                "description": "Log file name, can also contain timestamp",
                                "examples": [
                                    "zigbee2mqtt_%TIMESTAMP%.log"
                                ],
                                "requiresRestart": true,
                                "title": "Log file",
                                "type": "string"
                            },
                            "log_level": {
                                "default": "info",
                                "description": "Logging level",
                                "enum": [
                                    "info",
                                    "warn",
                                    "error",
                                    "debug"
                                ],
                                "title": "Log level",
                                "type": "string"
                            },
                            "log_output": {
                                "description": "Output location of the log, leave empty to suppress logging",
                                "items": {
                                    "enum": [
                                        "console",
                                        "file",
                                        "syslog"
                                    ],
                                    "type": "string"
                                },
                                "requiresRestart": true,
                                "title": "Log output",
                                "type": "array"
                            },
                            "log_rotation": {
                                "default": true,
                                "description": "Log rotation",
                                "requiresRestart": true,
                                "title": "Log rotation",
                                "type": "boolean"
                            },
                            "log_symlink_current": {
                                "default": false,
                                "description": "Create symlink to current logs in the log directory",
                                "requiresRestart": true,
                                "title": "Log symlink current",
                                "type": "boolean"
                            },
                            "log_syslog": {
                                "properties": {
                                    "app_name": {
                                        "default": "Zigbee2MQTT",
                                        "description": "The name of the application (Default: Zigbee2MQTT).",
                                        "title": "Localhost",
                                        "type": "string"
                                    },
                                    "eol": {
                                        "default": "/n",
                                        "description": "The end of line character to be added to the end of the message (Default: Message without modifications).",
                                        "title": "eol",
                                        "type": "string"
                                    },
                                    "host": {
                                        "default": "localhost",
                                        "description": "The host running syslogd, defaults to localhost.",
                                        "title": "Host",
                                        "type": "string"
                                    },
                                    "localhost": {
                                        "default": "localhost",
                                        "description": "Host to indicate that log messages are coming from (Default: localhost).",
                                        "title": "Localhost",
                                        "type": "string"
                                    },
                                    "path": {
                                        "default": "/dev/log",
                                        "description": "The path to the syslog dgram socket (i.e. /dev/log or /var/run/syslog for OS X).",
                                        "examples": [
                                            "/var/run/syslog"
                                        ],
                                        "title": "Path",
                                        "type": "string"
                                    },
                                    "pid": {
                                        "default": "process.pid",
                                        "description": "PID of the process that log messages are coming from (Default process.pid).",
                                        "title": "PID",
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 123,
                                        "description": "The port on the host that syslog is running on, defaults to syslogd's default port.",
                                        "title": "Port",
                                        "type": "number"
                                    },
                                    "protocol": {
                                        "default": "tcp4",
                                        "description": "The network protocol to log over (e.g. tcp4, udp4, tls4, unix, unix-connect, etc).",
                                        "examples": [
                                            "udp4",
                                            "tls4",
                                            "unix",
                                            "unix-connect"
                                        ],
                                        "title": "Protocol",
                                        "type": "string"
                                    },
                                    "type": {
                                        "default": "5424",
                                        "description": "The type of the syslog protocol to use (Default: BSD, also valid: 5424).",
                                        "title": "Type",
                                        "type": "string"
                                    }
                                },
                                "title": "syslog",
                                "type": "object"
                            },
                            "network_key": {
                                "description": "Network encryption key, changing requires repairing all devices!",
                                "oneOf": [
                                    {
                                        "title": "Network key(string)",
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "number"
                                        },
                                        "title": "Network key(array)",
                                        "type": "array"
                                    }
                                ],
                                "requiresRestart": true,
                                "title": "Network key"
                            },
                            "output": {
                                "description": "Examples when 'state' of a device is published json: topic: 'zigbee2mqtt/my_bulb' payload '{\"state\": \"ON\"}' attribute: topic 'zigbee2mqtt/my_bulb/state' payload 'ON' attribute_and_json: both json and attribute (see above)",
                                "enum": [
                                    "attribute_and_json",
                                    "attribute",
                                    "json"
                                ],
                                "title": "MQTT output type",
                                "type": "string"
                            },
                            "pan_id": {
                                "description": "ZigBee pan ID, changing requires repairing all devices!",
                                "oneOf": [
                                    {
                                        "title": "Pan ID (string)",
                                        "type": "string"
                                    },
                                    {
                                        "title": "Pan ID (number)",
                                        "type": "number"
                                    }
                                ],
                                "requiresRestart": true,
                                "title": "Pan ID"
                            },
                            "timestamp_format": {
                                "description": "Log timestamp format",
                                "examples": [
                                    "YYYY-MM-DD HH:mm:ss"
                                ],
                                "requiresRestart": true,
                                "title": "Timestamp format",
                                "type": "string"
                            },
                            "transmit_power": {
                                "description": "Transmit power of adapter, only available for Z-Stack (CC253*/CC2652/CC1352) adapters, CC2652 = 5dbm, CC1352 max is = 20dbm (5dbm default)",
                                "requiresRestart": true,
                                "title": "Transmit power",
                                "type": [
                                    "number",
                                    "null"
                                ]
                            }
                        },
                        "title": "Advanced",
                        "type": "object"
                    },
                    "availability": {
                        "description": "Checks whether devices are online/offline",
                        "oneOf": [
                            {
                                "title": "Availability (simple)",
                                "type": "boolean"
                            },
                            {
                                "properties": {
                                    "active": {
                                        "description": "Options for active devices (routers/mains powered)",
                                        "properties": {
                                            "timeout": {
                                                "default": 10,
                                                "description": "Time after which an active device will be marked as offline in minutes",
                                                "requiresRestart": true,
                                                "title": "Timeout",
                                                "type": "number"
                                            }
                                        },
                                        "requiresRestart": true,
                                        "title": "Active",
                                        "type": "object"
                                    },
                                    "passive": {
                                        "description": "Options for passive devices (mostly battery powered)",
                                        "properties": {
                                            "timeout": {
                                                "default": 1500,
                                                "description": "Time after which an passive device will be marked as offline in minutes",
                                                "requiresRestart": true,
                                                "title": "Timeout",
                                                "type": "number"
                                            }
                                        },
                                        "requiresRestart": true,
                                        "title": "Passive",
                                        "type": "object"
                                    }
                                },
                                "title": "Availability (advanced)",
                                "type": "object"
                            }
                        ],
                        "requiresRestart": true,
                        "title": "Availability"
                    },
                    "ban": {
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true,
                        "requiresRestart": true,
                        "title": "Ban (deprecated, use blocklist)",
                        "type": "array"
                    },
                    "blocklist": {
                        "description": "Block devices from the network (by ieeeAddr)",
                        "items": {
                            "type": "string"
                        },
                        "requiresRestart": true,
                        "title": "Blocklist",
                        "type": "array"
                    },
                    "device_options": {
                        "title": "Options that are applied to all devices",
                        "type": "object"
                    },
                    "devices": {
                        "patternProperties": {
                            "^.*$": {
                                "$ref": "#/definitions/device"
                            }
                        },
                        "propertyNames": {
                            "pattern": "^0x[\\d\\w]{16}$"
                        },
                        "type": "object"
                    },
                    "external_converters": {
                        "description": "You can define external converters to e.g. add support for a DiY device",
                        "examples": [
                            "DIYRuZ_FreePad.js"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "requiresRestart": true,
                        "title": "External converters",
                        "type": "array"
                    },
                    "frontend": {
                        "oneOf": [
                            {
                                "title": "Frontend (simple)",
                                "type": "boolean"
                            },
                            {
                                "properties": {
                                    "auth_token": {
                                        "description": "Enables authentication, disabled by default",
                                        "requiresRestart": true,
                                        "title": "Auth token",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "host": {
                                        "default": "0.0.0.0",
                                        "description": "Frontend binding host",
                                        "requiresRestart": true,
                                        "title": "Bind host",
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 8080,
                                        "description": "Frontend binding port",
                                        "requiresRestart": true,
                                        "title": "Port",
                                        "type": "number"
                                    },
                                    "url": {
                                        "description": "URL on which the frontend can be reached, currently only used for the Home Assistant device configuration page",
                                        "requiresRestart": true,
                                        "title": "URL",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    }
                                },
                                "title": "Frontend (advanced)",
                                "type": "object"
                            }
                        ],
                        "requiresRestart": true,
                        "title": "Frontend"
                    },
                    "groups": {
                        "patternProperties": {
                            "^.*$": {
                                "$ref": "#/definitions/group"
                            }
                        },
                        "propertyNames": {
                            "pattern": "^[\\w].*$"
                        },
                        "type": "object"
                    },
                    "homeassistant": {
                        "default": false,
                        "description": "Home Assistant integration (MQTT discovery)",
                        "oneOf": [
                            {
                                "title": "Home Assistant (simple)",
                                "type": "boolean"
                            },
                            {
                                "properties": {
                                    "discovery_topic": {
                                        "description": "Home Assistant discovery topic",
                                        "examples": [
                                            "homeassistant"
                                        ],
                                        "requiresRestart": true,
                                        "title": "Homeassistant discovery topic",
                                        "type": "string"
                                    },
                                    "legacy_entity_attributes": {
                                        "default": true,
                                        "description": "Home Assistant legacy entity attributes, when enabled Zigbee2MQTT will add state attributes to each entity, additional to the separate entities and devices it already creates",
                                        "title": "Home Assistant legacy entity attributes",
                                        "type": "boolean"
                                    },
                                    "legacy_triggers": {
                                        "default": true,
                                        "description": "Home Assistant legacy triggers, when enabled Zigbee2mqt will send an empty 'action' or 'click' after one has been send. A 'sensor_action' and 'sensor_click' will be discoverd",
                                        "title": "Home Assistant legacy triggers",
                                        "type": "boolean"
                                    },
                                    "status_topic": {
                                        "description": "Home Assistant status topic",
                                        "examples": [
                                            "homeassistant/status"
                                        ],
                                        "requiresRestart": true,
                                        "title": "Home Assistant status topic",
                                        "type": "string"
                                    }
                                },
                                "title": "Home Assistant (advanced)",
                                "type": "object"
                            }
                        ],
                        "requiresRestart": true,
                        "title": "Home Assistant integration"
                    },
                    "map_options": {
                        "properties": {
                            "graphviz": {
                                "properties": {
                                    "colors": {
                                        "properties": {
                                            "fill": {
                                                "properties": {
                                                    "coordinator": {
                                                        "type": "string"
                                                    },
                                                    "enddevice": {
                                                        "type": "string"
                                                    },
                                                    "router": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "font": {
                                                "properties": {
                                                    "coordinator": {
                                                        "type": "string"
                                                    },
                                                    "enddevice": {
                                                        "type": "string"
                                                    },
                                                    "router": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "line": {
                                                "properties": {
                                                    "active": {
                                                        "type": "string"
                                                    },
                                                    "inactive": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "title": "Networkmap",
                        "type": "object"
                    },
                    "mqtt": {
                        "properties": {
                            "base_topic": {
                                "default": "zigbee2mqtt",
                                "description": "MQTT base topic for Zigbee2MQTT MQTT messages",
                                "examples": [
                                    "zigbee2mqtt"
                                ],
                                "requiresRestart": true,
                                "title": "Base topic",
                                "type": "string"
                            },
                            "ca": {
                                "description": "Absolute path to SSL/TLS certificate of CA used to sign server and client certificates",
                                "examples": [
                                    "/etc/ssl/mqtt-ca.crt"
                                ],
                                "requiresRestart": true,
                                "title": "Certificate authority",
                                "type": "string"
                            },
                            "cert": {
                                "description": "Absolute path to SSL/TLS certificate for client-authentication",
                                "examples": [
                                    "/etc/ssl/mqtt-client.crt"
                                ],
                                "requiresRestart": true,
                                "title": "SSL/TLS certificate",
                                "type": "string"
                            },
                            "client_id": {
                                "description": "MQTT client ID",
                                "examples": [
                                    "MY_CLIENT_ID"
                                ],
                                "requiresRestart": true,
                                "title": "Client ID",
                                "type": "string"
                            },
                            "force_disable_retain": {
                                "default": false,
                                "description": "Disable retain for all send messages. ONLY enable if you MQTT broker doesn't support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform). Enabling will break the Home Assistant integration",
                                "requiresRestart": true,
                                "title": "Force disable retain",
                                "type": "boolean"
                            },
                            "include_device_information": {
                                "default": false,
                                "description": "Include device information to mqtt messages",
                                "title": "Include device information",
                                "type": "boolean"
                            },
                            "keepalive": {
                                "default": 60,
                                "description": "MQTT keepalive in second",
                                "requiresRestart": true,
                                "title": "Keepalive",
                                "type": "number"
                            },
                            "key": {
                                "description": "Absolute path to SSL/TLS key for client-authentication",
                                "examples": [
                                    "/etc/ssl/mqtt-client.key"
                                ],
                                "requiresRestart": true,
                                "title": "SSL/TLS key",
                                "type": "string"
                            },
                            "password": {
                                "description": "MQTT server authentication password",
                                "examples": [
                                    "ILOVEPELMENI"
                                ],
                                "requiresRestart": true,
                                "title": "Password",
                                "type": "string"
                            },
                            "reject_unauthorized": {
                                "default": true,
                                "description": "Disable self-signed SSL certificate",
                                "requiresRestart": true,
                                "title": "Reject unauthorized",
                                "type": "boolean"
                            },
                            "server": {
                                "description": "MQTT server URL (use mqtts:// for SSL/TLS connection)",
                                "examples": [
                                    "mqtt://localhost:1883"
                                ],
                                "requiresRestart": true,
                                "title": "MQTT server",
                                "type": "string"
                            },
                            "user": {
                                "description": "MQTT server authentication user",
                                "examples": [
                                    "johnnysilverhand"
                                ],
                                "requiresRestart": true,
                                "title": "User",
                                "type": "string"
                            },
                            "version": {
                                "default": 4,
                                "description": "MQTT protocol version",
                                "examples": [
                                    5
                                ],
                                "requiresRestart": true,
                                "title": "Version",
                                "type": [
                                    "number",
                                    "null"
                                ]
                            }
                        },
                        "required": [
                            "server"
                        ],
                        "title": "MQTT",
                        "type": "object"
                    },
                    "ota": {
                        "properties": {
                            "disable_automatic_update_check": {
                                "default": false,
                                "description": "Zigbee devices may request a firmware update, and do so frequently, causing Zigbee2MQTT to reach out to third party servers. If you disable these device initiated checks, you can still initiate a firmware update check manually.",
                                "title": "Disable automatic update check",
                                "type": "boolean"
                            },
                            "ikea_ota_use_test_url": {
                                "default": false,
                                "description": "Use IKEA TRADFRI OTA test server, see OTA updates documentation",
                                "requiresRestart": true,
                                "title": "IKEA TRADFRI OTA use test url",
                                "type": "boolean"
                            },
                            "update_check_interval": {
                                "default": 1440,
                                "description": "Your device may request a check for a new firmware update. This value determines how frequently third party servers may actually be contacted to look for firmware updates. The value is set in minutes, and the default is 1 day.",
                                "title": "Update check interval",
                                "type": "number"
                            },
                            "zigbee_ota_override_index_location": {
                                "description": "Location of override OTA index file",
                                "examples": [
                                    "index.json"
                                ],
                                "requiresRestart": true,
                                "title": "OTA index override file name",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "title": "OTA updates",
                        "type": "object"
                    },
                    "passlist": {
                        "description": "Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!",
                        "items": {
                            "type": "string"
                        },
                        "requiresRestart": true,
                        "title": "Passlist",
                        "type": "array"
                    },
                    "permit_join": {
                        "default": false,
                        "description": "Allow new devices to join (re-applied at restart)",
                        "title": "Permit join",
                        "type": "boolean"
                    },
                    "serial": {
                        "properties": {
                            "adapter": {
                                "default": "auto",
                                "description": "Adapter type, not needed unless you are experiencing problems",
                                "enum": [
                                    "deconz",
                                    "zstack",
                                    "zigate",
                                    "ezsp",
                                    "auto"
                                ],
                                "requiresRestart": true,
                                "title": "Adapter",
                                "type": [
                                    "string"
                                ]
                            },
                            "baudrate": {
                                "description": "Baud rate speed for serial port, this can be anything firmware support but default is 115200 for Z-Stack and EZSP, 38400 for Deconz, however note that some EZSP firmware need 57600",
                                "examples": [
                                    38400,
                                    57600,
                                    115200
                                ],
                                "requiresRestart": true,
                                "title": "Baudrate",
                                "type": "number"
                            },
                            "disable_led": {
                                "default": false,
                                "description": "Disable LED of the adapter if supported",
                                "requiresRestart": true,
                                "title": "Disable led",
                                "type": "boolean"
                            },
                            "port": {
                                "description": "Location of the adapter. To autodetect the port, set null",
                                "examples": [
                                    "/dev/ttyACM0"
                                ],
                                "requiresRestart": true,
                                "title": "Port",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "rtscts": {
                                "description": "RTS / CTS Hardware Flow Control for serial port",
                                "requiresRestart": true,
                                "title": "RTS / CTS",
                                "type": "boolean"
                            }
                        },
                        "title": "Serial",
                        "type": "object"
                    },
                    "whitelist": {
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true,
                        "requiresRestart": true,
                        "title": "Whitelist (deprecated, use passlist)",
                        "type": "array"
                    }
                },
                "required": [
                    "mqtt"
                ],
                "type": "object"
            },
            "coordinator": {
                "ieee_address": "0x00124b0022813501",
                "meta": {
                    "maintrel": 1,
                    "majorrel": 2,
                    "minorrel": 7,
                    "product": 1,
                    "revision": 20210319,
                    "transportrev": 2
                },
                "type": "zStack3x0"
            },
            "log_level": "debug",
            "network": {
                "channel": 15,
                "extended_pan_id": "0xaabbccddeeff0000",
                "pan_id": 2345
            },
            "permit_join": false,
            "restart_required": false,
            "version": "1.25.0-dev"
        },
        "topic": "bridge/info"
    },
    {
        "payload": [
            {
                "definition": null,
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "10": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "11": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "ssIasAce"
                            ],
                            "output": [
                                "ssIasZone",
                                "ssIasWd"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "110": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "12": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "13": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "genOta"
                            ],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "2": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "242": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "3": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "4": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "47": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "5": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "6": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "8": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "Coordinator",
                "ieee_address": "0x00124b0022813501",
                "interview_completed": true,
                "interviewing": false,
                "network_address": 0,
                "supported": false,
                "type": "Coordinator"
            },
            {
                "date_code": "20190723",
                "definition": {
                    "description": "TRADFRI ON/OFF switch",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Triggered action (e.g. a button click)",
                            "name": "action",
                            "property": "action",
                            "type": "enum",
                            "values": [
                                "on",
                                "off",
                                "brightness_move_down",
                                "brightness_move_up",
                                "brightness_stop"
                            ]
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "E1743",
                    "options": [
                        {
                            "access": 2,
                            "description": "Set to false to disable the legacy integration (highly recommended), will change structure of the published payload (default true).",
                            "name": "legacy",
                            "property": "legacy",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        },
                        {
                            "description": "Simulate a brightness value. If this device provides a brightness_move_up or brightness_move_down action it is possible to specify the update interval and delta.",
                            "features": [
                                {
                                    "access": 2,
                                    "description": "Delta per interval, 20 by default",
                                    "name": "delta",
                                    "property": "delta",
                                    "type": "numeric",
                                    "value_min": 0
                                },
                                {
                                    "access": 2,
                                    "description": "Interval duration",
                                    "name": "interval",
                                    "property": "interval",
                                    "type": "numeric",
                                    "unit": "ms",
                                    "value_min": 0
                                }
                            ],
                            "name": "simulated_brightness",
                            "property": "simulated_brightness",
                            "type": "composite"
                        }
                    ],
                    "supports_ota": true,
                    "vendor": "IKEA"
                },
                "endpoints": {
                    "1": {
                        "bindings": [
                            {
                                "cluster": "genPollCtrl",
                                "target": {
                                    "endpoint": 1,
                                    "ieee_address": "0x00124b0022813501",
                                    "type": "endpoint"
                                }
                            },
                            {
                                "cluster": "genOnOff",
                                "target": {
                                    "id": 901,
                                    "type": "group"
                                }
                            },
                            {
                                "cluster": "genPowerCfg",
                                "target": {
                                    "endpoint": 1,
                                    "ieee_address": "0x00124b0022813501",
                                    "type": "endpoint"
                                }
                            }
                        ],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genPowerCfg",
                                "genIdentify",
                                "genAlarms",
                                "genPollCtrl",
                                "touchlink",
                                "64636"
                            ],
                            "output": [
                                "genIdentify",
                                "genGroups",
                                "genOnOff",
                                "genLevelCtrl",
                                "genOta",
                                "closuresWindowCovering",
                                "touchlink"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "0xbc33acfffe17628b",
                "ieee_address": "0xbc33acfffe17628b",
                "interview_completed": false,
                "interviewing": false,
                "manufacturer": "IKEA of Sweden",
                "model_id": "TRADFRI on/off switch",
                "network_address": 25249,
                "power_source": "Battery",
                "software_build_id": "2.2.010",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "date_code": "20191218",
                "definition": {
                    "description": "Hue white and color ambiance E26/E27/E14",
                    "exposes": [
                        {
                            "features": [
                                {
                                    "access": 7,
                                    "description": "On/off state of this light",
                                    "name": "state",
                                    "property": "state",
                                    "type": "binary",
                                    "value_off": "OFF",
                                    "value_on": "ON",
                                    "value_toggle": "TOGGLE"
                                },
                                {
                                    "access": 7,
                                    "description": "Brightness of this light",
                                    "name": "brightness",
                                    "property": "brightness",
                                    "type": "numeric",
                                    "value_max": 254,
                                    "value_min": 0
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature of this light",
                                    "name": "color_temp",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        }
                                    ],
                                    "property": "color_temp",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature after cold power on of this light",
                                    "name": "color_temp_startup",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        },
                                        {
                                            "description": "Restore previous color_temp on cold power on",
                                            "name": "previous",
                                            "value": 65535
                                        }
                                    ],
                                    "property": "color_temp_startup",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "description": "Color of this light in the CIE 1931 color space (x/y)",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "x",
                                            "property": "x",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "y",
                                            "property": "y",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_xy",
                                    "property": "color",
                                    "type": "composite"
                                },
                                {
                                    "description": "Color of this light expressed as hue/saturation",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "hue",
                                            "property": "hue",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "saturation",
                                            "property": "saturation",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_hs",
                                    "property": "color",
                                    "type": "composite"
                                }
                            ],
                            "type": "light"
                        },
                        {
                            "access": 2,
                            "description": "Triggers an effect on the light (e.g. make light blink for a few seconds)",
                            "name": "effect",
                            "property": "effect",
                            "type": "enum",
                            "values": [
                                "blink",
                                "breathe",
                                "okay",
                                "channel_change",
                                "finish_effect",
                                "stop_effect"
                            ]
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "9290012573A",
                    "options": [
                        {
                            "access": 2,
                            "description": "Controls the transition time (in seconds) of on/off, brightness, color temperature (if applicable) and color (if applicable) changes. Defaults to `0` (no transition).",
                            "name": "transition",
                            "property": "transition",
                            "type": "numeric",
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "When enabled colors will be synced, e.g. if the light supports both color x/y and color temperature a conversion from color x/y to color temperature will be done when setting the x/y color (default true).",
                            "name": "color_sync",
                            "property": "color_sync",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        }
                    ],
                    "supports_ota": true,
                    "vendor": "Philips"
                },
                "description": "descr",
                "endpoints": {
                    "11": {
                        "bindings": [
                            {
                                "cluster": "genOnOff",
                                "target": {
                                    "endpoint": 1,
                                    "ieee_address": "0x00124b0022813501",
                                    "type": "endpoint"
                                }
                            },
                            {
                                "cluster": "genLevelCtrl",
                                "target": {
                                    "endpoint": 1,
                                    "ieee_address": "0x00124b0022813501",
                                    "type": "endpoint"
                                }
                            }
                        ],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genIdentify",
                                "genGroups",
                                "genScenes",
                                "genOnOff",
                                "genLevelCtrl",
                                "touchlink",
                                "lightingColorCtrl",
                                "manuSpecificUbisysDimmerSetup"
                            ],
                            "output": [
                                "genOta"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": [
                            {
                                "id": 1,
                                "name": "Music"
                            },
                            {
                                "id": 2,
                                "name": "Romantic"
                            },
                            {
                                "id": 6,
                                "name": "Scene 6"
                            }
                        ]
                    },
                    "242": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "greenPower"
                            ],
                            "output": [
                                "greenPower"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "hue1",
                "ieee_address": "0x0017880104292f0a",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "Philips",
                "model_id": "LCT016",
                "network_address": 8043,
                "power_source": "Mains (single phase)",
                "software_build_id": "1.50.2_r30933",
                "supported": true,
                "type": "Router"
            },
            {
                "date_code": "20191218",
                "definition": {
                    "description": "Hue white and color ambiance E26/E27/E14",
                    "exposes": [
                        {
                            "features": [
                                {
                                    "access": 7,
                                    "description": "On/off state of this light",
                                    "name": "state",
                                    "property": "state",
                                    "type": "binary",
                                    "value_off": "OFF",
                                    "value_on": "ON",
                                    "value_toggle": "TOGGLE"
                                },
                                {
                                    "access": 7,
                                    "description": "Brightness of this light",
                                    "name": "brightness",
                                    "property": "brightness",
                                    "type": "numeric",
                                    "value_max": 254,
                                    "value_min": 0
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature of this light",
                                    "name": "color_temp",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        }
                                    ],
                                    "property": "color_temp",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature after cold power on of this light",
                                    "name": "color_temp_startup",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        },
                                        {
                                            "description": "Restore previous color_temp on cold power on",
                                            "name": "previous",
                                            "value": 65535
                                        }
                                    ],
                                    "property": "color_temp_startup",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "description": "Color of this light in the CIE 1931 color space (x/y)",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "x",
                                            "property": "x",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "y",
                                            "property": "y",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_xy",
                                    "property": "color",
                                    "type": "composite"
                                },
                                {
                                    "description": "Color of this light expressed as hue/saturation",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "hue",
                                            "property": "hue",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "saturation",
                                            "property": "saturation",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_hs",
                                    "property": "color",
                                    "type": "composite"
                                }
                            ],
                            "type": "light"
                        },
                        {
                            "access": 2,
                            "description": "Triggers an effect on the light (e.g. make light blink for a few seconds)",
                            "name": "effect",
                            "property": "effect",
                            "type": "enum",
                            "values": [
                                "blink",
                                "breathe",
                                "okay",
                                "channel_change",
                                "finish_effect",
                                "stop_effect"
                            ]
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "9290012573A",
                    "options": [
                        {
                            "access": 2,
                            "description": "Controls the transition time (in seconds) of on/off, brightness, color temperature (if applicable) and color (if applicable) changes. Defaults to `0` (no transition).",
                            "name": "transition",
                            "property": "transition",
                            "type": "numeric",
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "When enabled colors will be synced, e.g. if the light supports both color x/y and color temperature a conversion from color x/y to color temperature will be done when setting the x/y color (default true).",
                            "name": "color_sync",
                            "property": "color_sync",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        }
                    ],
                    "supports_ota": true,
                    "vendor": "Philips"
                },
                "endpoints": {
                    "11": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genIdentify",
                                "genGroups",
                                "genScenes",
                                "genOnOff",
                                "genLevelCtrl",
                                "touchlink",
                                "lightingColorCtrl",
                                "manuSpecificUbisysDimmerSetup"
                            ],
                            "output": [
                                "genOta"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "242": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "greenPower"
                            ],
                            "output": [
                                "greenPower"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "hue_back_tv",
                "ieee_address": "0x0017880104dfc05e",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "Philips",
                "model_id": "LCT010",
                "network_address": 33891,
                "power_source": "Mains (single phase)",
                "software_build_id": "1.50.2_r30933",
                "supported": true,
                "type": "Router"
            },
            {
                "definition": {
                    "description": "MiJia wireless switch",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Triggered action (e.g. a button click)",
                            "name": "action",
                            "property": "action",
                            "type": "enum",
                            "values": [
                                "single",
                                "double",
                                "triple",
                                "quadruple",
                                "hold",
                                "release",
                                "many"
                            ]
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "WXKG01LM",
                    "options": [
                        {
                            "description": "The WXKG01LM only reports a button press and release.By default, a hold action is published when there is at least 1000 ms between both events. It could be that due to delays in the network the release message is received late. This causes a single click to be identified as a hold action. If you are experiencing this you can try experimenting with this option (e.g. set it to 2000) (value is in ms).",
                            "name": "hold_timeout",
                            "property": "hold_timeout",
                            "type": "numeric",
                            "value_min": 0
                        },
                        {
                            "description": "Sometimes it happens that the button does not send a release. To avoid problems a release is automatically send after a timeout. The default timeout is 4000 ms, you can increase it with this option (value is in ms).",
                            "name": "hold_timeout_expire",
                            "property": "hold_timeout_expire",
                            "type": "numeric",
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Set to false to disable the legacy integration (highly recommended), will change structure of the published payload (default true).",
                            "name": "legacy",
                            "property": "legacy",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        }
                    ],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "0x00158d000224154d",
                "ieee_address": "0x00158d000224154d",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.sensor_switch",
                "network_address": 38440,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "date_code": "20190907-V102",
                "definition": {
                    "description": "Zigbee smart switch",
                    "exposes": [
                        {
                            "features": [
                                {
                                    "access": 7,
                                    "description": "On/off state of the switch",
                                    "name": "state",
                                    "property": "state",
                                    "type": "binary",
                                    "value_off": "OFF",
                                    "value_on": "ON",
                                    "value_toggle": "TOGGLE"
                                }
                            ],
                            "type": "switch"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "BASICZBR3",
                    "options": [],
                    "supports_ota": false,
                    "vendor": "SONOFF"
                },
                "description": "wqewqe",
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genIdentify",
                                "genGroups",
                                "genScenes",
                                "genOnOff"
                            ],
                            "output": [
                                "genBasic"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "0x00124b001e73227f1",
                "ieee_address": "0x00124b001e73227f",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "SONOFF",
                "model_id": "BASICZBR3",
                "network_address": 38955,
                "power_source": "Mains (single phase)",
                "supported": true,
                "type": "Router"
            },
            {
                "definition": {
                    "description": "Aqara vibration sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Indicates whether the device detected vibration",
                            "name": "vibration",
                            "property": "vibration",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        },
                        {
                            "access": 1,
                            "description": "Triggered action (e.g. a button click)",
                            "name": "action",
                            "property": "action",
                            "type": "enum",
                            "values": [
                                "vibration",
                                "tilt",
                                "drop"
                            ]
                        },
                        {
                            "access": 1,
                            "name": "strength",
                            "property": "strength",
                            "type": "numeric"
                        },
                        {
                            "access": 3,
                            "name": "sensitivity",
                            "property": "sensitivity",
                            "type": "enum",
                            "values": [
                                "low",
                                "medium",
                                "high"
                            ]
                        },
                        {
                            "access": 1,
                            "name": "angle_x",
                            "property": "angle_x",
                            "type": "numeric",
                            "unit": "°",
                            "value_max": 90,
                            "value_min": -90
                        },
                        {
                            "access": 1,
                            "name": "angle_y",
                            "property": "angle_y",
                            "type": "numeric",
                            "unit": "°",
                            "value_max": 90,
                            "value_min": -90
                        },
                        {
                            "access": 1,
                            "name": "angle_z",
                            "property": "angle_z",
                            "type": "numeric",
                            "unit": "°",
                            "value_max": 90,
                            "value_min": -90
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "DJT11LM",
                    "options": [
                        {
                            "access": 2,
                            "description": "Time in seconds after which vibration is cleared after detecting it (default 90 seconds).",
                            "name": "vibration_timeout",
                            "property": "vibration_timeout",
                            "type": "numeric",
                            "value_min": 0
                        }
                    ],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "description": "датчик прикрепленный к рабочему стулу",
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "2": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "work/nur/jopa",
                "ieee_address": "0x00158d0002c48958",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.vibration.aq1",
                "network_address": 20205,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "definition": {
                    "description": "MiJia temperature & humidity sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Measured temperature value",
                            "name": "temperature",
                            "property": "temperature",
                            "type": "numeric",
                            "unit": "°C"
                        },
                        {
                            "access": 1,
                            "description": "Measured relative humidity",
                            "name": "humidity",
                            "property": "humidity",
                            "type": "numeric",
                            "unit": "%"
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "WSDCGQ01LM",
                    "options": [
                        {
                            "access": 2,
                            "description": "Number of digits after decimal point for temperature, takes into effect on next report of device.",
                            "name": "temperature_precision",
                            "property": "temperature_precision",
                            "type": "numeric",
                            "value_max": 3,
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Calibrates the temperature value (absolute offset), takes into effect on next report of device.",
                            "name": "temperature_calibration",
                            "property": "temperature_calibration",
                            "type": "numeric"
                        },
                        {
                            "access": 2,
                            "description": "Number of digits after decimal point for humidity, takes into effect on next report of device.",
                            "name": "humidity_precision",
                            "property": "humidity_precision",
                            "type": "numeric",
                            "value_max": 3,
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Calibrates the humidity value (absolute offset), takes into effect on next report of device.",
                            "name": "humidity_calibration",
                            "property": "humidity_calibration",
                            "type": "numeric"
                        }
                    ],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "livingroom/temp_humidity",
                "ieee_address": "0x00158d0001fa4f2f",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.sensor_ht",
                "network_address": 19403,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "definition": {
                    "description": "MiJia door & window contact sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Indicates if the contact is closed (= true) or open (= false)",
                            "name": "contact",
                            "property": "contact",
                            "type": "binary",
                            "value_off": true,
                            "value_on": false
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "MCCGQ01LM",
                    "options": [],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "livingroom/window",
                "ieee_address": "0x00158d0001e1a85a",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.sensor_magnet",
                "network_address": 35932,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "definition": {
                    "description": "MiJia door & window contact sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Indicates if the contact is closed (= true) or open (= false)",
                            "name": "contact",
                            "property": "contact",
                            "type": "binary",
                            "value_off": true,
                            "value_on": false
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "MCCGQ01LM",
                    "options": [],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "livingroom/ac power",
                "ieee_address": "0x00158d0004261dc7",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.sensor_magnet",
                "network_address": 14567,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "date_code": "20191205",
                "definition": {
                    "description": "Aqara temperature, humidity and pressure sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Measured temperature value",
                            "name": "temperature",
                            "property": "temperature",
                            "type": "numeric",
                            "unit": "°C"
                        },
                        {
                            "access": 1,
                            "description": "Measured relative humidity",
                            "name": "humidity",
                            "property": "humidity",
                            "type": "numeric",
                            "unit": "%"
                        },
                        {
                            "access": 1,
                            "description": "The measured atmospheric pressure",
                            "name": "pressure",
                            "property": "pressure",
                            "type": "numeric",
                            "unit": "hPa"
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "WSDCGQ11LM",
                    "options": [
                        {
                            "access": 2,
                            "description": "Number of digits after decimal point for temperature, takes into effect on next report of device.",
                            "name": "temperature_precision",
                            "property": "temperature_precision",
                            "type": "numeric",
                            "value_max": 3,
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Calibrates the temperature value (absolute offset), takes into effect on next report of device.",
                            "name": "temperature_calibration",
                            "property": "temperature_calibration",
                            "type": "numeric"
                        },
                        {
                            "access": 2,
                            "description": "Number of digits after decimal point for humidity, takes into effect on next report of device.",
                            "name": "humidity_precision",
                            "property": "humidity_precision",
                            "type": "numeric",
                            "value_max": 3,
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Calibrates the humidity value (absolute offset), takes into effect on next report of device.",
                            "name": "humidity_calibration",
                            "property": "humidity_calibration",
                            "type": "numeric"
                        },
                        {
                            "access": 2,
                            "description": "Number of digits after decimal point for pressure, takes into effect on next report of device.",
                            "name": "pressure_precision",
                            "property": "pressure_precision",
                            "type": "numeric",
                            "value_max": 3,
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "Calibrates the pressure value (absolute offset), takes into effect on next report of device.",
                            "name": "pressure_calibration",
                            "property": "pressure_calibration",
                            "type": "numeric"
                        }
                    ],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genIdentify",
                                "65535",
                                "msTemperatureMeasurement",
                                "msPressureMeasurement",
                                "msRelativeHumidity"
                            ],
                            "output": [
                                "genBasic",
                                "genGroups",
                                "65535"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "0x00158d0004866f11",
                "ieee_address": "0x00158d0004866f11",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.weather",
                "network_address": 27244,
                "power_source": "Battery",
                "software_build_id": "3000-0001",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "definition": {
                    "description": "MiJia door & window contact sensor",
                    "exposes": [
                        {
                            "access": 1,
                            "description": "Remaining battery in %",
                            "name": "battery",
                            "property": "battery",
                            "type": "numeric",
                            "unit": "%",
                            "value_max": 100,
                            "value_min": 0
                        },
                        {
                            "access": 1,
                            "description": "Indicates if the contact is closed (= true) or open (= false)",
                            "name": "contact",
                            "property": "contact",
                            "type": "binary",
                            "value_off": true,
                            "value_on": false
                        },
                        {
                            "access": 1,
                            "description": "Voltage of the battery in millivolts",
                            "name": "voltage",
                            "property": "voltage",
                            "type": "numeric",
                            "unit": "mV"
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "MCCGQ01LM",
                    "options": [],
                    "supports_ota": false,
                    "vendor": "Xiaomi"
                },
                "description": "это любой текст",
                "endpoints": {
                    "1": {
                        "bindings": [],
                        "clusters": {
                            "input": [],
                            "output": []
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "dining room/ac power",
                "ieee_address": "0x00158d00039fe32c",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "LUMI",
                "model_id": "lumi.sensor_magnet",
                "network_address": 20681,
                "power_source": "Battery",
                "supported": true,
                "type": "EndDevice"
            },
            {
                "date_code": "20191218",
                "definition": {
                    "description": "Hue white and color ambiance E26/E27/E14",
                    "exposes": [
                        {
                            "features": [
                                {
                                    "access": 7,
                                    "description": "On/off state of this light",
                                    "name": "state",
                                    "property": "state",
                                    "type": "binary",
                                    "value_off": "OFF",
                                    "value_on": "ON",
                                    "value_toggle": "TOGGLE"
                                },
                                {
                                    "access": 7,
                                    "description": "Brightness of this light",
                                    "name": "brightness",
                                    "property": "brightness",
                                    "type": "numeric",
                                    "value_max": 254,
                                    "value_min": 0
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature of this light",
                                    "name": "color_temp",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        }
                                    ],
                                    "property": "color_temp",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "access": 7,
                                    "description": "Color temperature after cold power on of this light",
                                    "name": "color_temp_startup",
                                    "presets": [
                                        {
                                            "description": "Coolest temperature supported",
                                            "name": "coolest",
                                            "value": 153
                                        },
                                        {
                                            "description": "Cool temperature (250 mireds / 4000 Kelvin)",
                                            "name": "cool",
                                            "value": 250
                                        },
                                        {
                                            "description": "Neutral temperature (370 mireds / 2700 Kelvin)",
                                            "name": "neutral",
                                            "value": 370
                                        },
                                        {
                                            "description": "Warm temperature (454 mireds / 2200 Kelvin)",
                                            "name": "warm",
                                            "value": 454
                                        },
                                        {
                                            "description": "Warmest temperature supported",
                                            "name": "warmest",
                                            "value": 500
                                        },
                                        {
                                            "description": "Restore previous color_temp on cold power on",
                                            "name": "previous",
                                            "value": 65535
                                        }
                                    ],
                                    "property": "color_temp_startup",
                                    "type": "numeric",
                                    "unit": "mired",
                                    "value_max": 500,
                                    "value_min": 153
                                },
                                {
                                    "description": "Color of this light in the CIE 1931 color space (x/y)",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "x",
                                            "property": "x",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "y",
                                            "property": "y",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_xy",
                                    "property": "color",
                                    "type": "composite"
                                },
                                {
                                    "description": "Color of this light expressed as hue/saturation",
                                    "features": [
                                        {
                                            "access": 7,
                                            "name": "hue",
                                            "property": "hue",
                                            "type": "numeric"
                                        },
                                        {
                                            "access": 7,
                                            "name": "saturation",
                                            "property": "saturation",
                                            "type": "numeric"
                                        }
                                    ],
                                    "name": "color_hs",
                                    "property": "color",
                                    "type": "composite"
                                }
                            ],
                            "type": "light"
                        },
                        {
                            "access": 2,
                            "description": "Triggers an effect on the light (e.g. make light blink for a few seconds)",
                            "name": "effect",
                            "property": "effect",
                            "type": "enum",
                            "values": [
                                "blink",
                                "breathe",
                                "okay",
                                "channel_change",
                                "finish_effect",
                                "stop_effect"
                            ]
                        },
                        {
                            "access": 1,
                            "description": "Link quality (signal strength)",
                            "name": "linkquality",
                            "property": "linkquality",
                            "type": "numeric",
                            "unit": "lqi",
                            "value_max": 255,
                            "value_min": 0
                        }
                    ],
                    "model": "9290012573A",
                    "options": [
                        {
                            "access": 2,
                            "description": "Controls the transition time (in seconds) of on/off, brightness, color temperature (if applicable) and color (if applicable) changes. Defaults to `0` (no transition).",
                            "name": "transition",
                            "property": "transition",
                            "type": "numeric",
                            "value_min": 0
                        },
                        {
                            "access": 2,
                            "description": "When enabled colors will be synced, e.g. if the light supports both color x/y and color temperature a conversion from color x/y to color temperature will be done when setting the x/y color (default true).",
                            "name": "color_sync",
                            "property": "color_sync",
                            "type": "binary",
                            "value_off": false,
                            "value_on": true
                        }
                    ],
                    "supports_ota": true,
                    "vendor": "Philips"
                },
                "endpoints": {
                    "11": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "genBasic",
                                "genIdentify",
                                "genGroups",
                                "genScenes",
                                "genOnOff",
                                "genLevelCtrl",
                                "touchlink",
                                "lightingColorCtrl",
                                "manuSpecificUbisysDimmerSetup"
                            ],
                            "output": [
                                "genOta"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    },
                    "242": {
                        "bindings": [],
                        "clusters": {
                            "input": [
                                "greenPower"
                            ],
                            "output": [
                                "greenPower"
                            ]
                        },
                        "configured_reportings": [],
                        "scenes": []
                    }
                },
                "friendly_name": "0x0017880103d55d65",
                "ieee_address": "0x0017880103d55d65",
                "interview_completed": true,
                "interviewing": false,
                "manufacturer": "Philips",
                "model_id": "LCT016",
                "network_address": 17462,
                "power_source": "Mains (single phase)",
                "software_build_id": "1.50.2_r30933",
                "supported": true,
                "type": "Router"
            }
        ],
        "topic": "bridge/devices"
    },
    {
        "payload": [
            {
                "description": "Test group description",
                "friendly_name": "hue lights",
                "id": 1,
                "members": [
                    {
                        "endpoint": 11,
                        "ieee_address": "0x0017880104292f0a"
                    },
                    {
                        "endpoint": 11,
                        "ieee_address": "0x0017880104dfc05e"
                    },
                    {
                        "endpoint": 11,
                        "ieee_address": "0x0017880103d55d65"
                    }
                ],
                "scenes": [
                    {
                        "id": 2,
                        "name": "Scene 2"
                    },
                    {
                        "id": 5,
                        "name": "Scene 5"
                    },
                    {
                        "id": 7,
                        "name": "Scene 7"
                    },
                    {
                        "id": 55,
                        "name": "Scene 55"
                    }
                ]
            },
            {
                "friendly_name": "default_bind_group",
                "id": 901,
                "members": [],
                "scenes": []
            }
        ],
        "topic": "bridge/groups"
    },
    {
        "payload": [
            {
                "code": "const minutes = function (m) {\n    return m * 1000 * 60\n};\n\nconst timers = {};\nconst doAfter = function (delay, code, ...args) {\n    clearTimeout(timers[code.name]);\n    timers[code.name] = setTimeout((...params) => {\n        code(...params)\n    }, delay, ...args);\n}\n\n\n\nclass MyExampleExtension1614405068547 {\n    constructor(zigbee, mqtt, state, publishEntityState, eventBus, settings, logger) {\n        this.logger = logger;\n        logger.info('Loaded  MyExampleExtension1614405068547');\n        mqtt.publish('example/extension', 'hello from  123 MyExampleExtension1614405068547');\n        this.mqttBaseTopic = settings.get().mqtt.base_topic;\n        this.eventBus = eventBus;\n        this.mqtt = mqtt;\n        this.eventBus.on('stateChange', this.onStateChange.bind(this), this.constructor.name);\n    }\n\n\n\n    async onStateChange(data) {\n        const {\n            entity: {ieeeAddr: ID},\n            update\n        } = data;\n        console.log({update, ID});\n        \n\n        \n        const myLampIeeAddr = '0x00124b001e73227f'; // change this\n        const workLightCommandTopic = `${this.mqttBaseTopic}/${myLampIeeAddr}/set`;\n        \n        //example how to toggle state\n        if (ID === '0x00158d000224154d') { //state changed for myRemote (button click)\n            if (update.action === 'single') { //toggle work light on single click\n                //sending message to z2m, so it can toggle sonoff zbr state\n                this.mqtt.onMessage(workLightCommandTopic, JSON.stringify({\n                    state: 'toggle'\n                }));\n            }\n\n            if (update.action === 'double') { //toggle dinning light (ESPHome) on single click\n                //sending data right to the mqtt broker\n                this.mqtt.publish('switch/sonoff_basic_relay/command', 'toggle', {}, 'dinning');\n            }\n        }\n\n        if (ID === '0x00158d0002c48958') { //work chair vibration sensor\n            if (update.action) { // someone sat on the chair\n                this.logger.info('Detected vibration, turning on light');\n                this.mqtt.onMessage(workLightCommandTopic, JSON.stringify({\n                    state: 'on'\n                }));\n                //turn off ligth after 30 minutes without any activity\n                doAfter(minutes(30), function TurnOffWorkLight(topic) {\n                    this.logger.info('Turning off light');\n                    this.mqtt.onMessage(topic, JSON.stringify({\n                        state: 'off'\n                    }));\n                }.bind(this), workLightCommandTopic);\n            }\n        }\n        \n        \n        // if (ID === '0x00158d0002c4a78f') { //baby chair vibration sensor\n        //     if (update.action) { // someone sat on the chair\n        //         //sending data right to the mqtt broker\n        //         this.mqtt.publish('switch/sonoff_basic_relay/command', 'on', {}, 'dinning');\n                \n        //     }\n        // }\n        \n        \n        \n\n        // if (ID === '0x00158d0003d20443') { // kitchen door\n        //     if (update.contact !== true) { //the door is opened\n        //         controllYeelight(kitchenLight, turnOnYeelight);\n        //         //turn off ligth after 5 minutes if no more movement\n        //         doAfter(minutes(5), function TurnOffYeelight(light) {\n        //             controllYeelight(light, turnOffYeelight);\n        //         }, kitchenLight);\n        //     }\n        // }\n\n        // if (ID === '0x00158d000450d0e6') { //kitchen motion sensor\n        //     if (update.occupancy === true) { // detected motion\n        //         controllYeelight(kitchenLight, turnOnYeelight);\n        //         doAfter(minutes(5), function TurnOffYeelight(light) {\n        //             controllYeelight(light, turnOffYeelight);\n        //         }, kitchenLight);\n        //     }\n        // }\n    }\n\n    async onMQTTMessage(topic, message) {\n        // console.log({topic, message});\n    }\n    \n    async stop() {\n        return this.eventBus.removeListeners(this.constructor.name);\n    }\n}\n\n\n\n\nmodule.exports = MyExampleExtension1614405068547;\n",
                "name": "user-extension1614083565739.js"
            }
        ],
        "topic": "bridge/extensions"
    },
    {
        "payload": "offline",
        "topic": "0xbc33acfffe17628b/availability"
    },
    {
        "payload": {
            "state": "Offline"
        },
        "topic": "hue1/availability"
    },
    {
        "payload": "offline",
        "topic": "hue_back_tv/availability"
    },
    {
        "payload": "online",
        "topic": "0x00158d000224154d/availability"
    },
    {
        "payload": "online",
        "topic": "0x00124b001e73227f1/availability"
    },
    {
        "payload": "online",
        "topic": "livingroom/temp_humidity/availability"
    },
    {
        "payload": "online",
        "topic": "livingroom/window/availability"
    },
    {
        "payload": "online",
        "topic": "livingroom/ac power/availability"
    },
    {
        "payload": "online",
        "topic": "0x00158d0004866f11/availability"
    },
    {
        "payload": "online",
        "topic": "dining room/ac power/availability"
    },
    {
        "payload": "offline",
        "topic": "0x0017880103d55d65/availability"
    },
    {
        "payload": "offline",
        "topic": "hue lights/availability"
    },
    {
        "payload": "online",
        "topic": "901/availability"
    },
    {
        "payload": {
            "last_seen": "2022-04-15T16:33:53+08:00"
        },
        "topic": "0xbc33acfffe17628b"
    },
    {
        "payload": {
            "color_mode": "color_temp",
            "color_temp": 200,
            "last_seen": "2021-10-22T08:38:44+08:00"
        },
        "topic": "hue1"
    },
    {
        "payload": {
            "brightness": 99,
            "color": {
                "h": 27,
                "hue": 27,
                "s": 92,
                "saturation": 92,
                "x": 0.5056,
                "y": 0.4152
            },
            "color_mode": "color_temp",
            "color_temp": 454,
            "color_temp_startup": 500,
            "last_seen": "2022-04-15T17:48:28+08:00",
            "state": "ON"
        },
        "topic": "hue_back_tv"
    },
    {
        "payload": {
            "battery": 100,
            "last_seen": "2022-05-16T20:46:44+08:00",
            "linkquality": 66,
            "voltage": 3042
        },
        "topic": "0x00158d000224154d"
    },
    {
        "payload": {
            "last_seen": "2022-05-16T21:08:31+08:00",
            "linkquality": 18,
            "state": "ON"
        },
        "topic": "0x00124b001e73227f1"
    },
    {
        "payload": {
            "angle": 9,
            "angle_x": -6,
            "angle_x_absolute": 96,
            "angle_y": 81,
            "angle_y_absolute": 9,
            "angle_z": 7,
            "battery": 100,
            "last_seen": "2022-05-16T21:08:37+08:00",
            "linkquality": 12,
            "strength": 30,
            "temperature": 31,
            "vibration": true,
            "voltage": 3015
        },
        "topic": "work/nur/jopa"
    },
    {
        "payload": {
            "battery": 100,
            "humidity": 65.59,
            "last_seen": "2022-05-16T20:37:54+08:00",
            "linkquality": 90,
            "temperature": 25.84,
            "voltage": 3035
        },
        "topic": "livingroom/temp_humidity"
    },
    {
        "payload": {
            "battery": 100,
            "contact": true,
            "last_seen": "2022-05-16T20:50:02+08:00",
            "linkquality": 96,
            "voltage": 3045
        },
        "topic": "livingroom/window"
    },
    {
        "payload": {
            "battery": 100,
            "contact": false,
            "last_seen": "2022-05-16T21:05:21+08:00",
            "linkquality": 87,
            "voltage": 3035
        },
        "topic": "livingroom/ac power"
    },
    {
        "payload": {
            "battery": 0,
            "humidity": 59.96,
            "last_seen": "2022-05-16T21:06:04+08:00",
            "linkquality": 12,
            "pressure": 1009.8,
            "temperature": 32.9,
            "voltage": 2815
        },
        "topic": "0x00158d0004866f11"
    },
    {
        "payload": {
            "battery": 100,
            "contact": true,
            "last_seen": "2022-05-16T20:14:38+08:00",
            "linkquality": 12,
            "voltage": 3025
        },
        "topic": "dining room/ac power"
    },
    {
        "payload": {
            "brightness": 110,
            "color_mode": "xy",
            "last_seen": "2022-04-15T17:48:30+08:00",
            "state": "ON"
        },
        "topic": "0x0017880103d55d65"
    }
]